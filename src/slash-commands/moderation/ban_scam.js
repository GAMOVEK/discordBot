import {
	EmbedBuilder,
	ContextMenuCommandBuilder,
	RESTJSONErrorCodes,
	GuildBan,
	User,
} from 'discord.js'
import { convertDateForDiscord, diffDate } from '../../util/util.js'

export default {
	contextMenu: new ContextMenuCommandBuilder().setName('ban_scam').setType(2),
	interaction: async (interaction, client) => {
		if (!interaction.commandType === 2) return

		// On diff√®re la r√©ponse pour avoir plus de 3 secondes
		await interaction.deferReply({ ephemeral: true })

		// Acquisition du membre
		const member = interaction.guild.members.cache.get(interaction.targetUser.id)
		if (!member)
			return interaction.editReply({
				content: "Je n'ai pas trouv√© cet utilisateur, v√©rifie la mention ou l'ID üòï",
			})

		// On ne peut pas se ban soi-m√™me
		if (member.user === interaction.user)
			return interaction.editReply({
				content: 'Tu ne peux pas te bannir toi-m√™me üòï',
			})

		// V√©rification si le ban existe d√©j√†
		const ban = await interaction.guild.bans.fetch(member.user).catch(() => false)
		if (ban instanceof GuildBan)
			return interaction.editReply({
				content: 'Cet utilisateur est d√©j√† banni üòï',
				ephemeral: true,
			})

		// Acquisition de la base de donn√©es Moderation
		const bddModeration = client.config.db.pools.moderation
		if (!bddModeration)
			return interaction.editReply({
				content:
					'Une erreur est survenue lors de la connexion √† la base de donn√©es Moderation üòï',
				ephemeral: true,
			})

		// Acquisition du salon de logs
		const logsChannel = interaction.guild.channels.cache.get(
			client.config.guild.channels.LOGS_BANS_CHANNEL_ID,
		)
		if (!logsChannel) return

		// Envoi du message de bannissement en message priv√©
		let errorDM = ''

		const embed = new EmbedBuilder()
			.setColor('#C27C0E')
			.setTitle('Scam')
			.setDescription(
				`**Vous √™tes √† pr√©sent banni du serveur**
				Votre compte semble avoir √©t√© compromis. Pour votre s√©curit√©, nous vous conseillons de changer vos mots de passe.
				Si vous estimez que cette sanction est ill√©gitime, vous pouvez effectuer une demande de lev√©e de bannissement que nous √©tudierons √† l'adresse https://moderation.ctrl-f.info`,
			)
			.setAuthor({
				name: interaction.guild.name,
				iconURL: interaction.guild.iconURL({ dynamic: true }),
				url: interaction.guild.vanityURL,
			})

		let DMMessage = false
		if (member)
			DMMessage = await member
				.send({
					embeds: [embed],
				})
				.catch(error => {
					console.error(error)
					errorDM =
						"\n\n‚ÑπÔ∏è Le message priv√© n'a pas √©t√© envoy√© car l'utilisateur les a bloqu√©"
				})

		// Ban du membre
		const banAction = await interaction.guild.members
			.ban(member.user, {
				deleteMessageSeconds: 86400,
				reason: `${interaction.user.tag} : compte compromis`,
			})
			.catch(error => {
				// Suppression du message priv√© envoy√©
				// car action de bannissement non r√©alis√©e
				if (DMMessage) DMMessage.delete()

				if (error.code === RESTJSONErrorCodes.UnknownUser)
					return interaction.editReply({
						content: "Tu n'as pas donn√© un ID d'utilisateur üò¨",
						ephemeral: true,
					})

				if (error.code === RESTJSONErrorCodes.MissingPermissions)
					return interaction.editReply({
						content: "Tu n'as pas les permissions pour bannir ce membre üò¨",
						ephemeral: true,
					})

				console.error(error)
				return interaction.editReply({
					content: 'Une erreur est survenue lors du bannissement du membre üò¨',
					ephemeral: true,
				})
			})

		// Si pas d'erreur, message de confirmation du bannissement
		if (banAction instanceof User) {
			await interaction.editReply({
				content: `üî® \`${member.user.tag}\` a √©t√© banni d√©finitivement\n\nRaison : compte compromis${errorDM}`,
			})

			// Cr√©ation de l'embed
			const logEmbed = new EmbedBuilder()
				.setColor('C9572A')
				.setAuthor({
					name: `${member.user.tag} (ID : ${member.user.id})`,
					iconURL: banAction.displayAvatarURL({ dynamic: true }),
				})
				.setDescription(`\`\`\`\n${interaction.user.tag} : compte compromis\`\`\``)
				.addFields([
					{
						name: 'Mention',
						value: banAction.toString(),
						inline: true,
					},
					{
						name: 'Date de cr√©ation du compte',
						value: convertDateForDiscord(banAction.createdAt),
						inline: true,
					},
					{
						name: '√Çge du compte',
						value: diffDate(banAction.createdAt),
						inline: true,
					},
				])
				.setFooter({
					iconURL: interaction.user.displayAvatarURL({ dynamic: true }),
					text: `Membre banni par ${interaction.user.tag}`,
				})
				.setTimestamp(new Date())

			// Insertion du nouveau ban en base de donn√©es
			try {
				const sql =
					'INSERT INTO bans_logs (discord_id, username, avatar, executor_id, executor_username, reason, timestamp) VALUES (?, ?, ?, ?, ?, ?, ?)'
				const data = [
					member.user.id,
					member.user.username,
					member.user.avatar ? member.user.avatar : null,
					interaction.user.id,
					interaction.user.username,
					'compte compromis',
					Math.round(Date.now() / 1000),
				]

				await bddModeration.execute(sql, data)
			} catch (error) {
				console.error(error)
				return interaction.editReply({
					content: 'Une erreur est survenue lors du ban du membre en base de donn√©es üò¨',
				})
			}

			return logsChannel.send({ embeds: [logEmbed] })
		}

		// Si au moins une erreur, throw
		if (banAction instanceof Error || DMMessage instanceof Error)
			throw new Error(
				"L'envoi d'un message et / ou le bannissement d'un membre a √©chou√©. Voir les logs pr√©c√©dents pour plus d'informations.",
			)
	},
}
